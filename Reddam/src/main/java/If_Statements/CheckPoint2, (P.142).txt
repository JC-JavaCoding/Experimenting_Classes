(1) = 1,4
______________________________________________________________________________________
(2) 
2,1) ! (num > 7) = (num <= 7) AND (num > 7)'
2,2) ! (num <= 7): (num > 7)
2,3) !(letter == 'X'): (letter == 'X')'
2.4) !(realNum < 0.75): (realNum >= 0.75)
2.5) !(days == 5 && hours > 3): (A' + B')
2.6) !(degree == true || experience >= 5): (A'.B')
2.7) !((degree == true || experience >=5) && referenceChecked == true): (A'.B') + C
2.8) !( (day == 25 && month == 12) || (day == 31 && month == 12) ): (A'+B').(C'+D')
______________________________________________________________________________________
(3)
3.1) if (x == 2)
	{
	   //Do Nothing
	}

	else 
	{
	   System.out.println("X is 2");
	   x = x*3;
	}
	
---------------------------------------------------------------------------------------
	if (x != 2)
	{
	   x = x * 3;
	}

	else 
	{
	   System.out.println("X is 2");
	}

3.2) no
______________________________________________________________________________________

(4)
4.1) To negate the if statement, so as to get every other possibility ex. 
	if (x == 2){//for x = 2 value}
	else  {//for x > 2 & x < 2 or !2}

4.2) if (x >=2 )
	{
		if (x < 2)
		{}
	}
     else {}
______________________________________________________________________________________

(5)
import javax.swing.JOptionPane;

public class CheckInput
{
   public static void main(String args[])
   {
      int num = Integer.parseInt(JOptionPane.showInputDialog("Enter a number"));
      System.out.println("The number you have entered is: "+ num);
      
      if (num % 5 == 0)
      {
         num *= 2;
      }

      else 
      {
         num *=3;
      }

      System.out.println("The changed number is: "+ num);
   }
}
______________________________________________________________________________________
(6)
in a case of more than 2 checks, the system - with a nested ifstatement - will only do
the checks until a true if statement condition is found. Multiple if statements will 
run all of the checks which can be unnecissary if only one condition has to be met. 
It is useful when more than one condition has to be checked and/or met.
______________________________________________________________________________________
(7)
+; -; *; /; %
______________________________________________________________________________________
(8)
<; <=; ==; !=; >=; >
______________________________________________________________________________________
(9)
&; |; !
______________________________________________________________________________________
(10)
in the computer?
______________________________________________________________________________________
(11)
int x = 30;
int y = 10;

if ( (x == 30) && (y == 10) )
{
   System.out.println("X = 30 and Y = 10");
}